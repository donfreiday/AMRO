a=5
b=4
ls()
list=ls()
rm(ls())
setwd(~)
setwd("~")
getwd
getwd()
# Remove all variables from the environment. ls() lists variables, rm() removes variables.
# This won't remove variables beginning with '.', use rm(list = ls(all.names = TRUE)) for that.
rm(list = ls())
library(unmarked)
install.packages("unmarked")
# Remove all variables from the environment. ls() lists variables, rm() removes variables.
# This won't remove variables beginning with '.', use rm(list = ls(all.names = TRUE)) for that.
rm(list = ls())
# Missing packages can be installed using install.packages("<package>")
library(unmarked)
library(reshape2)
install.packages(reshape2)
install.packages("reshape2")
# Remove all variables from the environment. ls() lists variables, rm() removes variables.
# This won't remove variables beginning with '.', use rm(list = ls(all.names = TRUE)) for that.
rm(list = ls())
# Missing packages can be installed using install.packages("<package>")
library(unmarked)
library(reshape2)
library(ggplot2)
install.packages("ggplot2")
install.packages("plyr")
library(plyr)
# Remove all variables from the environment. ls() lists variables, rm() removes variables.
# This won't remove variables beginning with '.', use rm(list = ls(all.names = TRUE)) for that.
rm(list = ls())
# Missing packages can be installed using install.packages("<package>")
library(unmarked)
library(reshape2)
library(ggplot2)
setwd("C:/Users/Don/projects/AMRO")
pointCount <- read.csv('PC_DATA_16.csv', header=TRUE)
View(pointCount)
# Remove all variables from the environment. ls() lists variables, rm() removes variables.
# This won't remove variables beginning with '.', use rm(list = ls(all.names = TRUE)) for that.
rm(list = ls(all.names = TRUE))
# Missing packages can be installed using install.packages("<package>") in the R Console.
library(unmarked)
library(reshape2)
library(ggplot2)
setwd("C:/Users/Don/projects/AMRO")
pointCount <- read.csv('PC_DATA_16.csv', header=TRUE)
# Get rid of surveys from points with no planting or no maintenance due to not enough survey points
# Note for Don: in R, & is a vectorized operator. &&  form evaluates left to right examining only the first element of each vector.
pointCount <- subset(pointCount, pointCount[,2] != "Maintenance_No_Planting"  & pointCount[,2] != "No_Planting_No_Maintenance", drop=T)
# Create a column for age value and fill it
pointCount$age <- ifelse(pointCount[,2] == "Original_y25_1", 25,
ifelse(pointCount[,2] == "Original_y25_2", 25,
ifelse(pointCount[,2] == "Original_y25_3", 25,
ifelse(pointCount[,2] == "Original_y25_4", 25,
ifelse(pointCount[,2] == "Church_y15_3", 15,
ifelse(pointCount[,2] == "Church_y15_2", 15,
ifelse(pointCount[,2] == "Triangle_y15_2", 15,
ifelse(pointCount[,2] == "Triangle_y15_1", 15,
ifelse(pointCount[,2] == "Triangle_y7_2", 7,
ifelse(pointCount[,2] == "Triangle_y7_1", 7,
ifelse(pointCount[,2] == "Fox_Den_y7_2", 7,
ifelse(pointCount[,2] == "Fox_Den_y5_1", 5,
ifelse(pointCount[,2] == "Fox_Den_y5_2", 5,
ifelse(pointCount[,2] == "Fox_Den_y5_3", 5,
ifelse(pointCount[,2] == "Fox_Den_y3_1", 3,
ifelse(pointCount[,2] == "Fox_Den_y3_2", 3,
ifelse(pointCount[,2] == "Fox_Den_y3_3", 3,
ifelse(pointCount[,2] == "Fox_Den_y3_4", 3,
ifelse(pointCount[,2] == "Mowed_y0_3", 0,
ifelse(pointCount[,2] == "Mowed_y0_4", 0,
ifelse(pointCount[,2] == "Fox_Den_y0_1", 0,
NA  )))))))))))))))))))))
View(pointCount)
grep(*_y+_*), pointCount[,2]
grep("*_y+_*"), pointCount[,2]
grep("*_y+_*", pointCount[,2])
pmatch("_y", pointCount[,2])
pointCount[,2]
?str
# Remove all variables from the environment. ls() lists variables, rm() removes variables.
# This won't remove variables beginning with '.', use rm(list = ls(all.names = TRUE)) for that.
rm(list = ls(all.names = TRUE))
# Missing packages can be installed using install.packages("<package>") in the R Console.
library(unmarked)
library(reshape2)
library(ggplot2)
setwd("C:/Users/Don/projects/AMRO")
pointCount <- read.csv('PC_DATA_16.csv', header=TRUE)
# Get rid of surveys from points with no planting or no maintenance due to not enough survey points
# Note for Don: in R, & is a vectorized operator. &&  form evaluates left to right examining only the first element of each vector.
pointCount <- subset(pointCount, pointCount[,2] != "Maintenance_No_Planting"  & pointCount[,2] != "No_Planting_No_Maintenance", drop=T)
# Create and populate 'age' column
switch(pointCount[,2],
"Original_y25_1" = 25,
"Original_y25_2" = 25,
"Original_y25_3" = 25,
"Original_y25_4" = 25,
"Church_y15_3" = 15,
"Church_y15_2" = 15,
"Triangle_y15_2" = 15,
"Triangle_y15_1" = 15,
"Triangle_y7_2" = 7,
"Triangle_y7_1" = 7,
"Fox_Den_y7_2" = 7,
"Fox_Den_y5_1" = 5,
"Fox_Den_y5_2" = 5,
"Fox_Den_y5_3" = 5,
"Fox_Den_y3_1" = 3,
"Fox_Den_y3_2" = 3,
"Fox_Den_y3_3" = 3,
"Fox_Den_y3_4" = 3,
"Mowed_y0_3" = 0,
"Mowed_y0_4" = 0,
"Fox_Den_y0_1" = 0)
# Create and populate 'age' column
switch(pointCount[,2],
Original_y25_1 = 25,
Original_y25_2 = 25,
Original_y25_3 = 25,
Original_y25_4 = 25,
Church_y15_3 = 15,
Church_y15_2 = 15,
Triangle_y15_2 = 15,
Triangle_y15_1 = 15,
Triangle_y7_2 = 7,
Triangle_y7_1 = 7,
Fox_Den_y7_2 = 7,
Fox_Den_y5_1 = 5,
Fox_Den_y5_2 = 5,
Fox_Den_y5_3 = 5,
Fox_Den_y3_1 = 3,
Fox_Den_y3_2 = 3,
Fox_Den_y3_3 = 3,
Fox_Den_y3_4 = 3,
Mowed_y0_3 = 0,
Mowed_y0_4 = 0,
Fox_Den_y0_1 = 0)
View(pointCount)
# Create and populate 'age' column
switch(pointCount[1,2],
"Original_y25_1" = 25,
"Original_y25_2" = 25,
"Original_y25_3" = 25,
"Original_y25_4" = 25,
"Church_y15_3" = 15,
"Church_y15_2" = 15,
"Triangle_y15_2" = 15,
"Triangle_y15_1" = 15,
"Triangle_y7_2" = 7,
"Triangle_y7_1" = 7,
"Fox_Den_y7_2" = 7,
"Fox_Den_y5_1" = 5,
"Fox_Den_y5_2" = 5,
"Fox_Den_y5_3" = 5,
"Fox_Den_y3_1" = 3,
"Fox_Den_y3_2" = 3,
"Fox_Den_y3_3" = 3,
"Fox_Den_y3_4" = 3,
"Mowed_y0_3" = 0,
"Mowed_y0_4" = 0,
"Fox_Den_y0_1" = 0)
View(pointCount)
# Create and populate 'age' column
switch(as.character(pointCount[1,2]),
"Original_y25_1" = 25,
"Original_y25_2" = 25,
"Original_y25_3" = 25,
"Original_y25_4" = 25,
"Church_y15_3" = 15,
"Church_y15_2" = 15,
"Triangle_y15_2" = 15,
"Triangle_y15_1" = 15,
"Triangle_y7_2" = 7,
"Triangle_y7_1" = 7,
"Fox_Den_y7_2" = 7,
"Fox_Den_y5_1" = 5,
"Fox_Den_y5_2" = 5,
"Fox_Den_y5_3" = 5,
"Fox_Den_y3_1" = 3,
"Fox_Den_y3_2" = 3,
"Fox_Den_y3_3" = 3,
"Fox_Den_y3_4" = 3,
"Mowed_y0_3" = 0,
"Mowed_y0_4" = 0,
"Fox_Den_y0_1" = 0)
# Remove all variables from the environment. ls() lists variables, rm() removes variables.
# This won't remove variables beginning with '.', use rm(list = ls(all.names = TRUE)) for that.
rm(list = ls(all.names = TRUE))
# Missing packages can be installed using install.packages("<package>") in the R Console.
library(unmarked)
library(reshape2)
library(ggplot2)
setwd("C:/Users/Don/projects/AMRO")
pointCount <- read.csv('PC_DATA_16.csv', header=TRUE)
# Get rid of surveys from points with no planting or no maintenance due to not enough survey points
# Note for Don: in R, & is a vectorized operator. &&  form evaluates left to right examining only the first element of each vector.
pointCount <- subset(pointCount, pointCount[,2] != "Maintenance_No_Planting"  & pointCount[,2] != "No_Planting_No_Maintenance", drop=T)
# Create and populate 'age' column
pointCount$age <- switch(as.character(pointCount[1,2]),
"Original_y25_1" = 25,
"Original_y25_2" = 25,
"Original_y25_3" = 25,
"Original_y25_4" = 25,
"Church_y15_3" = 15,
"Church_y15_2" = 15,
"Triangle_y15_2" = 15,
"Triangle_y15_1" = 15,
"Triangle_y7_2" = 7,
"Triangle_y7_1" = 7,
"Fox_Den_y7_2" = 7,
"Fox_Den_y5_1" = 5,
"Fox_Den_y5_2" = 5,
"Fox_Den_y5_3" = 5,
"Fox_Den_y3_1" = 3,
"Fox_Den_y3_2" = 3,
"Fox_Den_y3_3" = 3,
"Fox_Den_y3_4" = 3,
"Mowed_y0_3" = 0,
"Mowed_y0_4" = 0,
"Fox_Den_y0_1" = 0)
View(pointCount)
# Create and populate 'age' column
pointCount$age <- switch(as.string(pointCount[1,2]),
"Original_y25_1" = 25,
"Original_y25_2" = 25,
"Original_y25_3" = 25,
"Original_y25_4" = 25,
"Church_y15_3" = 15,
"Church_y15_2" = 15,
"Triangle_y15_2" = 15,
"Triangle_y15_1" = 15,
"Triangle_y7_2" = 7,
"Triangle_y7_1" = 7,
"Fox_Den_y7_2" = 7,
"Fox_Den_y5_1" = 5,
"Fox_Den_y5_2" = 5,
"Fox_Den_y5_3" = 5,
"Fox_Den_y3_1" = 3,
"Fox_Den_y3_2" = 3,
"Fox_Den_y3_3" = 3,
"Fox_Den_y3_4" = 3,
"Mowed_y0_3" = 0,
"Mowed_y0_4" = 0,
"Fox_Den_y0_1" = 0)
# Create and populate 'age' column
pointCount$age <- switch(as.string(pointCount[,2]),
"Original_y25_1" = 25,
"Original_y25_2" = 25,
"Original_y25_3" = 25,
"Original_y25_4" = 25,
"Church_y15_3" = 15,
"Church_y15_2" = 15,
"Triangle_y15_2" = 15,
"Triangle_y15_1" = 15,
"Triangle_y7_2" = 7,
"Triangle_y7_1" = 7,
"Fox_Den_y7_2" = 7,
"Fox_Den_y5_1" = 5,
"Fox_Den_y5_2" = 5,
"Fox_Den_y5_3" = 5,
"Fox_Den_y3_1" = 3,
"Fox_Den_y3_2" = 3,
"Fox_Den_y3_3" = 3,
"Fox_Den_y3_4" = 3,
"Mowed_y0_3" = 0,
"Mowed_y0_4" = 0,
"Fox_Den_y0_1" = 0)
# Create and populate 'age' column
pointCount$age <- switch(as.character(pointCount[,2]),
"Original_y25_1" = 25,
"Original_y25_2" = 25,
"Original_y25_3" = 25,
"Original_y25_4" = 25,
"Church_y15_3" = 15,
"Church_y15_2" = 15,
"Triangle_y15_2" = 15,
"Triangle_y15_1" = 15,
"Triangle_y7_2" = 7,
"Triangle_y7_1" = 7,
"Fox_Den_y7_2" = 7,
"Fox_Den_y5_1" = 5,
"Fox_Den_y5_2" = 5,
"Fox_Den_y5_3" = 5,
"Fox_Den_y3_1" = 3,
"Fox_Den_y3_2" = 3,
"Fox_Den_y3_3" = 3,
"Fox_Den_y3_4" = 3,
"Mowed_y0_3" = 0,
"Mowed_y0_4" = 0,
"Fox_Den_y0_1" = 0)
as.character(pointCount[,2]
# Remove all variables from the environment. ls() lists variables, rm() removes variables.
# This won't remove variables beginning with '.', use rm(list = ls(all.names = TRUE)) for that.
rm(list = ls(all.names = TRUE))
# Missing packages can be installed using install.packages("<package>") in the R Console.
library(unmarked)
library(reshape2)
library(ggplot2)
setwd("C:/Users/Don/projects/AMRO")
pointCount <- read.csv('PC_DATA_16.csv', header=TRUE)
as.character(pointCount[,2]
pointCount[,2]
pointCount[,2]
# Remove all variables from the environment. ls() lists variables, rm() removes variables.
# This won't remove variables beginning with '.', use rm(list = ls(all.names = TRUE)) for that.
rm(list = ls(all.names = TRUE))
# Missing packages can be installed using install.packages("<package>") in the R Console.
library(unmarked)
library(reshape2)
library(ggplot2)
setwd("C:/Users/Don/projects/AMRO")
pointCount <- read.csv('PC_DATA_16.csv', header=TRUE)
View(pointCount)
# Get rid of surveys from points with no planting or no maintenance due to not enough survey points
# Note for Don: in R, & is a vectorized operator. &&  form evaluates left to right examining only the first element of each vector.
pointCount <- subset(pointCount, pointCount[,2] != "Maintenance_No_Planting"  & pointCount[,2] != "No_Planting_No_Maintenance", drop=T)
pointCOunt
pointCount
View(pointCount)
