ifelse(output$lower == 0, "yes", "no")
# Set months with no data to zero
output$test <- ifelse(output$lower == 0, "yes", "no")
output <- predict(fm1.all.birds, "state", appendData=TRUE)
output[,"Species"] <- species
?apply
ifelse(output$lower == 0, output[,1] = 0, output[,1])
ifelse(output$lower == 0, output[,1] <- 0, output[,1])
View(output)
output <- predict(fm1.all.birds, "state", appendData=TRUE)
output[,"Species"] <- species
# Set months with no data to zero
apply(output, 1, function(row) {
row$lower
})
# Set months with no data to zero
apply(output, 1, function(row) {
row
})
# Set months with no data to zero
apply(output, 1, function(row) {
row
})
# Set months with no data to zero
apply(output, 1, function(row) {
row[,"lower"]
})
# Set months with no data to zero
apply(output, 1, function(row) {
row["lower"]
})
# Set months with no data to zero
apply(output, 1, function(row) {
if (row["lower"]==0) {
row[1:4] <- 0
}
})
View(output)
# Set months with no data to zero
apply(output, 1, function(row) {
if (row["lower"]==0) {
row[1] <- 0
}
})
# Set months with no data to zero
apply(output, 1, function(row) {
if (row["lower"]==0) {
row["Predicted"] <- 0
}
})
output <- predict(fm1.all.birds, "state", appendData=TRUE)
output[,"Species"] <- species
output[, 1:4] <- ifelse(output$lower == 0, 0, output[, 1:4])
output[, 1] <- ifelse(output$lower == 0, 0, output[, 1])
output[, 1:4] <- ifelse(output$lower == 0, 0, output[, 1:4])
# Todo: this better
for (i in 1:4) {
output[, i] <- ifelse(output$lower == 0, 0, output[, i])
}
output <- predict(fm1.all.birds, "state", appendData=TRUE)
output[,"Species"] <- species
for (i in 1:4) {
output[, i] <- ifelse(output$lower == 0, 0, output[, i])
for (i in 1:4) {
output[, i] <- ifelse(output$lower == 0, 0, output[, i])
for (i in 1:4) {
output[, i] <- ifelse(output$lower == 0, 0, output[, i])
for (i in 1:4) {
output[, i] <- ifelse(output$lower == 0, 0, output[, i])
# Todo: this better
output[, 1] <- ifelse(output$lower == 0, 0, output[, 1])
# Todo: this better
ifelse(output$lower == 0, 0, output[, 1])
output[, 1] <- ifelse(output$lower == 0, 0, output[, 1])
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
output <- predict(fm1.all.birds, "state", appendData=TRUE)
output[,"Species"] <- species
View(output)
output[, 1] <- ifelse(output$lower == 0, 0, output[, 1])
for (i in 1:4) {
output[, i] <- ifelse(output$lower==0, 0, output[, i])
}
View(output)
for (i in 1:4) {
print(i)
output[, i] <- ifelse(output$lower==0, 0, output[, i])
}
q
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
View(output)
output[,"Species"] <- species
for (i in 1:4) {
output[, i] <- ifelse(output$lower==0, 0, output[, i])
}
# output[, 1] <- ifelse(output$lower == 0, 0, output[, 1])
# Set months with no data to zero
for (i in 1:4) {
output[, i] <- ifelse(output$lower==0, 0, output[, i])
}
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
output <- output[!duplicated(output), ]
output <- predict(fm1.all.birds, "state", appendData=TRUE)
output[,"Species"] <- species
# Set months with no data to zero
# todo: this better
for (i in 1:4) {
output[, i] <- ifelse(output$lower==0, 0, output[, i])
}
q
q
output[duplicated(output), ]
# Set months with no data to zero
# todo: this better
for (i in 1:4) {
output[, i] <- ifelse(output$lower==0, 0, output[, i])
}
View(output)
# Keep only abundance data, removing site covariates removing duplicate rows for display purposes.
output[ , -c(5:10)]
# Keep only abundance data, removing site covariates removing duplicate rows for display purposes.
output <- output[ , -c(5:10)]
output <- output[!duplicated(output), ]
View(det.covs)
View(det.covs)
View(det.covs)
View(det.covs)
output$category <- merge(output, det.covs[,c(7,9)], by="block_id")
output$category <- merge(output, det.covs[,c(7,9)], by="block_id", add.missing= FALSE)
str(output)
strsplit(output$block_id, "_")
strsplit(output$block_id, "_").1
strsplit(output$block_id, "_")[,1]
strsplit(output$block_id, "_")[1]
strsplit(output$block_id, "_")[1][1]
strsplit(output$block_id, "_")[1,1]
strsplit(output$block_id, "_")[,1]
strsplit(output$block_id, "_")[[1]][2]
strsplit(output$block_id, "_")[[2]
q
strsplit(output$block_id, "_")[][2]
strsplit(output$block_id, "_")[1][1]
strsplit(output$block_id, "_")[[1]][1]
strsplit(output$block_id, "_")[[]][1]
strsplit(output$block_id, "_")[[1:24]][1]
lapply(strsplit(output$block_id, "_"), [, 2)
lapply(strsplit(output$block_id, "_"), [, 2])
lapply(strsplit(output$block_id, "_"), `[`, 2)
# todo: change species code to species name for aesthetic purposes
#
lapply(strsplit(output$block_id, "_"), `[`, 2)
# todo: change species code to species name for aesthetic purposes
#
output$category <- lapply(strsplit(output$block_id, "_"), `[`, 1)
output$month <- lapply(strsplit(output$block_id, "_"), `[`, 2)
# Manually setting levels to order by month and category for plotting
output$month <- as.factor(output$month)
View(output)
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
# Create columns for category and month for display
output$category <- lapply(strsplit(output$block_id, "_"), `[`, 1)
output$month <- lapply(strsplit(output$block_id, "_"), `[`, 2)
View(output)
# Manually setting levels to order by month and category for plotting
output$month <- as.factor(output$month)
# Manually setting levels to order by month and category for plotting
output$month <- as.factor(unlist(output$month)
output$month <- factor(output$month, levels = rev(levels(output$month)))
output$category <- as.factor(output$category)
output$category <- factor(output$category, levels = c( "y0", "y3", "y5", "y7", "y15", "y25", "edge", "mature"))
output$block_id <- as.factor(output$block_id )
output$block_id <- factor(output$block_id, levels = c("y0_September", "y0_October", "y0_November", "y3_September", "y3_October", "y3_November", "y5_September", "y5_October", "y5_November", "y7_September", "y7_October", "y7_November", "y15_September", "y15_October", "y15_November", "y25_September", "y25_October", "y25_November", "edge_September", "edge_October", "edge_November", "mature_September", "mature_October", "mature_November") )
levels(output$block_id)
##Now plot with ggplot2
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin=Density-X95.ci, ymax=Density+X95.ci), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
}
# Manually setting levels to order by month and category for plotting
output$month <- as.factor(unlist(output$month) )
output$month <- factor(output$month, levels = rev(levels(output$month)))
output$category <- as.factor(unlist(output$category))
output$category <- factor(output$category, levels = c( "y0", "y3", "y5", "y7", "y15", "y25", "edge", "mature"))
output$block_id <- as.factor(output$block_id )
output$block_id <- factor(output$block_id, levels = c("y0_September", "y0_October", "y0_November", "y3_September", "y3_October", "y3_November", "y5_September", "y5_October", "y5_November", "y7_September", "y7_October", "y7_November", "y15_September", "y15_October", "y15_November", "y25_September", "y25_October", "y25_November", "edge_September", "edge_October", "edge_November", "mature_September", "mature_October", "mature_November") )
levels(output$block_id)
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle(paste("Relative Abundance of ", species," Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016")) +
labs(x="Category", y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle(paste("Relative Abundance of ", species," Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016")) +
labs(x="Category", y="Density (birds/Ha)")
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
View(p)
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
View(output)
levels(output$block_id)
levels(output$block_id)
levels(output$block_id)
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
View(p)
p
str(output)
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
output$Predicted <- as.numeric(as.character(output$Predicted))
output$upper <- as.numeric(as.character(output$upper))
output$lower <- as.numeric(as.character(output$lower))
str(output)
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
p
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p
output$Predicted <- as.numeric(as.character(output$Predicted))
output$upper <- as.numeric(as.character(output$upper))
output$lower <- as.numeric(as.character(output$lower))
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p
output$Predicted <- as.numeric(as.character(output$Predicted))
output$upper <- as.numeric(as.character(output$upper))
output$lower <- as.numeric(as.character(output$lower))
# Manually setting ggplot levels to order by month and category for plotting
# Unlist is necessary because strsplit was used to create month and category columns
output$month <- as.factor(unlist(output$month))
output$month <- factor(output$month, levels = rev(levels(output$month)))
output$category <- as.factor(unlist(output$category))
output$category <- factor(output$category, levels = c( "y0", "y3", "y5", "y7", "y15", "y25", "edge", "mature"))
output$block_id <- as.factor(output$block_id )
output$block_id <- factor(output$block_id, levels = c("y0_September", "y0_October", "y0_November", "y3_September", "y3_October", "y3_November", "y5_September", "y5_October", "y5_November", "y7_September", "y7_October", "y7_November", "y15_September", "y15_October", "y15_November", "y25_September", "y25_October", "y25_November", "edge_September", "edge_October", "edge_November", "mature_September", "mature_October", "mature_November") )
levels(output$block_id)
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
p
str(output)
output$block_id <- as.numeric(as.character(output$block_id))
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
output$block_id <- as.character(output$block_id)
output$upper <- as.numeric(as.character(output$upper))
output$lower <- as.numeric(as.character(output$lower))
# Manually setting ggplot levels to order by month and category for plotting
# Unlist is necessary because strsplit was used to create month and category columns
output$month <- as.factor(unlist(output$month))
output$month <- factor(output$month, levels = rev(levels(output$month)))
output$category <- as.factor(unlist(output$category))
output$category <- factor(output$category, levels = c( "y0", "y3", "y5", "y7", "y15", "y25", "edge", "mature"))
output$block_id <- as.factor(output$block_id )
output$block_id <- factor(output$block_id, levels = c("y0_September", "y0_October", "y0_November", "y3_September", "y3_October", "y3_November", "y5_September", "y5_October", "y5_November", "y7_September", "y7_October", "y7_November", "y15_September", "y15_October", "y15_November", "y25_September", "y25_October", "y25_November", "edge_September", "edge_October", "edge_November", "mature_September", "mature_October", "mature_November") )
levels(output$block_id)
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
p
str(output)
output$block_id <- as.character(output$block_id)
output$upper <- as.numeric(as.character(output$upper))
output$lower <- as.numeric(as.character(output$lower))
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
p
str(output)
output$block_id <- as.character(output$block_id)
output$category <- as.character(output$category)
output$month <- as.character(output$month)
output$upper <- as.numeric(as.character(output$upper))
output$lower <- as.numeric(as.character(output$lower))
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
str(output)
p
output$block_id <- as.character(output$block_id)
output$category <- as.character(output$category)
output$month <- as.character(output$month)
output$upper <- as.numeric(as.character(output$upper))
output$lower <- as.numeric(as.character(output$lower))
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p
p
View(p)
source('~/projects/AMRO/AMRO.R', echo=TRUE)
p
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
levels(output$block_id)
ggplot2(output, aes(x = category)) + geom_histogram()
ggplot(output, aes(x = category)) + geom_histogram()
head(output)
##Now plot with ggplot2
ggplot(output,
aes(x = "block_id", y = "Predicted")
+ geom_point())
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p
library(scales)
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() )+
geom_errorbar(stat="identity", aes(x = category, ymin="lower", ymax="upper"), width=.2,
position=position_dodge(width = 1) ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
# Iterate over species codes
for(species in species.codes) {
cat("Processing ", species, "\n")
###Cast count data using the sum of all sparrows seen
# todo: Use species variable instead of string literal
# Dcast reference: https://www.computerworld.com/article/2486425/business-intelligence/business-intelligence-4-data-wrangling-tasks-in-r-for-advanced-beginners.html?page=8
# Reshape2 https://cran.r-project.org/web/packages/reshape2/reshape2.pdf
count.data <- dcast(data.count.melt, survey_id ~ dist.band.num, sum, subset = .(Species.Code == species )) # | (Species.Code=="AMRO" ) | (Species.Code=="VEER") | (Species.Code=="SWTH") | (Species.Code=="WOTH") | (Species.Code=="EABL"))) # | (Species.Code=="SAVS") | (Species.Code=="SWSP") | (Species.Code=="FOSP")))
# Remove last two distance columns to subset out birds beyond 50 meters
count.data <- count.data[, -c(4:5)]
all.birds <- merge(det.covs, count.data, by= "survey_id", all=T)
all.birds[is.na(all.birds)] <- 0
####Try using block_id in State Variable
all.birds.umf <- unmarkedFrameDS(y=as.matrix(all.birds[,11:12]),
siteCovs=data.frame(all.birds[,c(3:6,10)]),
dist.breaks=c(0,25,50), unitsIn="m", survey="point")
(fm1.all.birds <- distsamp(~1 ~block_id, all.birds.umf))
output <- predict(fm1.all.birds, "state", appendData=TRUE)
output[,"Species"] <- species
# Set months with no data to zero
# todo: this better
for (i in 1:4) {
output[, i] <- ifelse(output$lower==0, 0, output[, i])
}
# Keep only abundance data, removing site covariates removing duplicate rows for display purposes.
output <- output[ , -c(5:10)]
output <- output[!duplicated(output), ]
# todo: change species code to species name for aesthetic purposes
# Create columns for category and month for display
output$category <- lapply(strsplit(output$block_id, "_"), `[`, 1)
output$month <- lapply(strsplit(output$block_id, "_"), `[`, 2)
# Manually setting ggplot levels to order by month and category for plotting
# Unlist is necessary because strsplit was used to create month and category columns
output$month <- as.factor(unlist(output$month))
output$month <- factor(output$month, levels = rev(levels(output$month)))
output$category <- as.factor(unlist(output$category))
output$category <- factor(output$category, levels = c( "y0", "y3", "y5", "y7", "y15", "y25", "edge", "mature"))
output$block_id <- as.factor(output$block_id )
output$block_id <- factor(output$block_id, levels = c("y0_September", "y0_October", "y0_November", "y3_September", "y3_October", "y3_November", "y5_September", "y5_October", "y5_November", "y7_September", "y7_October", "y7_November", "y15_September", "y15_October", "y15_November", "y25_September", "y25_October", "y25_November", "edge_September", "edge_October", "edge_November", "mature_September", "mature_October", "mature_November") )
levels(output$block_id)
# output$block_id <- as.character(output$block_id)
# output$category <- as.character(output$category)
# output$month <- as.character(output$month)
# output$upper <- as.numeric(as.character(output$upper))
# output$lower <- as.numeric(as.character(output$lower))
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output, aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() ) +
ggtitle("Relative Abundance of American Robins Using Areas of Different Tree
Planting Treatments at Middle Run Valley Park in Fall 2016") +
labs(x="Category",y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
}
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
source('~/projects/AMRO/AMRO.R', echo=TRUE)
p
# todo: title for ggplot from species variable, rather than string literal
p <- ggplot(output,
aes(x = category, y = Predicted, fill= month)) +
geom_bar( stat="identity", color = "black", position=position_dodge() ) +
geom_errorbar(stat="identity", aes(x = category, ymin=lower, ymax=upper), width=.2, position=position_dodge(width = 1) ) +
ggtitle(paste("Relative Abundance of ", species, " Using Areas of Different Tree Planting Treatments at Middle Run Valley Park in Fall 2016")) +
labs(x="Category",y="Density (birds/Ha)")
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
p
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
p + scale_fill_manual(values=c('darkgreen','gold', 'firebrick1'))
}
source('~/projects/AMRO/AMRO.R', echo=TRUE)
source('~/projects/AMRO/AMRO.R', echo=TRUE)
source('~/projects/AMRO/AMRO.R', echo=TRUE)
source('~/projects/AMRO/AMRO.R', echo=TRUE)
print(ggplot(p))
source('~/projects/AMRO/AMRO.R', echo=TRUE)
source('~/projects/AMRO/AMRO.R', echo=TRUE)
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
View(count.data)
all.birds.umf <- unmarkedFrameDS(y=as.matrix(all.birds[,11:12]),
####Try using block_id in State Variable
all.birds.umf <- unmarkedFrameDS(y=as.matrix(all.birds[,11:12]),
siteCovs=data.frame(all.birds[,c(3:6,10)]),
dist.breaks=c(0,25,50), unitsIn="m", survey="point")
(fm1.all.birds <- distsamp(~1 ~block_id, all.birds.umf))
(fm1.all.birds <- distsamp(~1 ~block_id, all.birds.umf))
####Try using block_id in State Variable
all.birds.umf <- unmarkedFrameDS(y=as.matrix(all.birds[,11:12]),
siteCovs=data.frame(all.birds[,c(3:6,10)]),
dist.breaks=c(0,25,50), unitsIn="m", survey="point")
debugSource('~/projects/AMRO/AMRO.R', echo=TRUE)
